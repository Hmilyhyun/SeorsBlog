<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java类加载器和类加载机制</title>
    <link href="/SeorsBlog/2021/02/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/SeorsBlog/2021/02/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="代码执行过程"><a href="#代码执行过程" class="headerlink" title="代码执行过程"></a>代码执行过程</h2><p><img src="/SeorsBlog/2021/02/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2023-09-17-17-01-40.png" title="代码执行过程">  </p><h2 id="类的生命周期和加载过程"><a href="#类的生命周期和加载过程" class="headerlink" title="类的生命周期和加载过程"></a>类的生命周期和加载过程</h2><p><img src="/SeorsBlog/2021/02/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2023-09-17-17-45-18.png" title="类的生命周期">  </p><h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p>类的生命周期包括：加载、链接、初始化、使用和卸载。其中，加载、链接和初始化是属于类的加载过程。  </p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><ol><li><p>加载（Loading）</p><ul><li>根据类的全限定名，获取类（字节码文件）的二进制字节流，在内存中生成该类的java.lang.Class对象，作为方法区这个类各种数据的访问入口。  </li><li>加载方式为懒加载（用到时再加载，比如调用类的main()，new对象等等）。</li></ul></li><li><p>链接（Linking）<br>该阶段分为三步：  </p><ul><li><p>验证（Verify）  </p><blockquote><p>确保.class文件是正确的、符合规范的。确保是安全的，不会危害到jvm。 </p></blockquote></li><li><p>准备（Prepare）</p><blockquote><p>为static字段分配内存，并设置默认的初始值。其中，不包括final修饰的static字段，这类字段在编译的时候就分配好了。  </p></blockquote></li><li><p>解析（Resolve）</p><blockquote><p>把符号引用替换为直接引用。将常量池里面的静态方法的符号引用替换为内存中指向目标的指针、相对偏移量或一个间接定位到目标的句柄。这个过程成为静态链接。</p></blockquote></li></ul></li><li><p>初始化（initializaion）  </p><ul><li>执行类的构造器方法init()<br>该方法按照编码给类的静态变量赋值，执行静态代码块。  </li><li>如果有父类，要先执行父类的init()，再执行子类的init()。</li></ul></li></ol><h2 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h2><ol><li><p>引导类加载器（Bootstrap ClassLoader）</p><ul><li>C&#x2F;C++实现，java程序无法直接操作；</li><li>加载JAVA_HOME&#x2F;jre&#x2F;lib里面的核心类库；</li><li>没有继承java.lang.ClassLoader，没有父类加载器；</li><li>负责加载扩展类加载器和应用类加载器，是它们的父类加载器；</li><li>出于安全考虑，启动类只加载包名为：java、javax、sun开头的类。</li></ul></li><li><p>扩展类加载器（Extension ClassLoader）  </p><ul><li>实现类为sun.misc.Launcher$ExtClassLoader，java程序可操作；</li><li>继承java.lang.ClassLoader，父类加载器为启动类加载器；</li><li>负责加载JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext目录中jar包的类。</li></ul></li><li><p>应用类加载器（Application ClassLoader）</p><ul><li>实现类为sun.misc.Launcher$AppClassLoader  </li><li>继承ava.lang.ClassLoader，父类加载器为扩展类加载器；  </li><li>加载环境变量classpath路径下的类，主要是自己写的类；</li><li>通过ClassLoader#getSystemClassLoader()获取并操作这个加载器。</li></ul></li><li><p>自定义类加载</p><ul><li>自己实现的类加载器，可以按自己的要求实现指定类的加载（定制要求）；</li><li>实现方法：继承java.lang.ClassLoader类，重写findClass()方法。</li></ul></li></ol><h2 id="获取类加载器的方式"><a href="#获取类加载器的方式" class="headerlink" title="获取类加载器的方式"></a>获取类加载器的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式一：获取当前类的 ClassLoader</span><br>clazz.getClassLoader()<br><span class="hljs-comment">// 方式二：获取当前线程上下文的 ClassLoader</span><br>Thread.currentThread().getContextClassLoader()<br><span class="hljs-comment">// 方式三：获取系统的 ClassLoader</span><br>ClassLoader.getSystemClassLoader()<br><span class="hljs-comment">// 方式四：获取调用者的 ClassLoader</span><br>DriverManager.getCallerClassLoader()<br></code></pre></td></tr></table></figure><h2 id="类加载机制——双亲委派加载机制"><a href="#类加载机制——双亲委派加载机制" class="headerlink" title="类加载机制——双亲委派加载机制"></a>类加载机制——双亲委派加载机制</h2><p><img src="/SeorsBlog/2021/02/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2023-09-18-10-41-50.png" title="双亲委派加载机制">  </p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>类加载器收到类加载的请求，先委托给付类加载器加载；</li><li>如果父类加载器还有父类加载器，继续向上委托，一直委托到启动类加载器：Bootstrap ClassLoader；</li><li>父类加载器加载成功，直接返回成功结果。父类加载器加载失败，子类加载器自己加载。子类加载器也加载失败，抛出ClassNotFoundException异常。</li></ol><h3 id="使用双亲委派的原因"><a href="#使用双亲委派的原因" class="headerlink" title="使用双亲委派的原因"></a>使用双亲委派的原因</h3><ul><li>避免类被重复加载。父类加载器加载过的类，不会被子类加载器重复加载，保证了被加载类的唯一性。</li><li>沙箱安全机制。比如，自己写的java.lang.String类就不会被加载，可以防止核心API库被随意篡改。</li></ul><h2 id="Tomcat的类加载机制"><a href="#Tomcat的类加载机制" class="headerlink" title="Tomcat的类加载机制"></a>Tomcat的类加载机制</h2><h3 id="Tomcat的类加载要求"><a href="#Tomcat的类加载要求" class="headerlink" title="Tomcat的类加载要求"></a>Tomcat的类加载要求</h3><ol><li>web容器里需要部署多个应用容器，不同应用容器可能会依赖同一个第三方类库的不同版本，都需要进行加载且相互隔离；</li><li>web容器里中相同类库的相同的版本必须可以共享，避免加载多个副本，浪费资源；</li><li>web容器自己依赖的类库，要和应用程序依赖的类库相互隔离，以满足安全要求；</li><li>web容器要支持jsp的修改和热部署。因为jsp修改后包名、类名都不变，正常不会重新加载，所以，jsp的类加载器要支持卸载和重新创建，从而卸载和重新加载jsp的类。</li></ol><p>双亲委派模型只满足上面第二条要求，其余三条都不满足，故Tomcat打破了双亲委派模型的类加载机制。  </p><h3 id="Tomcat的类加载器"><a href="#Tomcat的类加载器" class="headerlink" title="Tomcat的类加载器"></a>Tomcat的类加载器</h3><p><img src="/SeorsBlog/2021/02/15/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2023-09-18-11-49-51.png">  </p><p>Tomcat的几个主要类加载器：  </p><ul><li>Common ClassLoader：加载的class可以被Tomcat容器本身以及各个Webapp访问；  </li><li>Catalina ClassLoader：加载的class对于Webapp不可见；</li><li>Shared ClassLoader：各个Webapp共享的类加载器，加载的class对于所有Webapp可见，但是对Tomcat容器不可见；</li><li>Webapp ClassLoader：各个Webapp私有的类加载器，加载的class只对当前Webapp可见，比如加载war包里相关的类。每个war包应用都有自己的Webapp ClassLoader，相互隔离，比如不同war包应用引入了不同的spring版本，这样实现就能加载各自的spring版本；  </li><li>JSP ClassLoader: 加载范围仅仅是这个JSP文件所编译出来的那一个.Class文件，它出现的目的就是为了被丢弃：当Web容器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新的Jsp类加载器来实现JSP文件的热加载功能。</li></ul><p>从图中的委派关系中可以看出：</p><ul><li>Common ClassLoader能加载的类都可以被Catalina ClassLoader和Shared ClassLoader使用，从而实现了公有类库的共用，而Catalina ClassLoader和Shared ClassLoader自己能加载的类则与对方相互隔离。</li><li>WebApp ClassLoader可以使用Shared ClassLoader加载到的类，但各个WebApp ClassLoader实例之间相互隔离。</li></ul><p>Tomcat 为了实现隔离性，打破了双亲委派。<strong>每个Webapp ClassLoader加载自己的目录下的class文件，不会传递给父类加载器，打破双亲委派机制。</strong></p><h2 id="JVM内同一个类的判断条件"><a href="#JVM内同一个类的判断条件" class="headerlink" title="JVM内同一个类的判断条件"></a>JVM内同一个类的判断条件</h2><p>同一个JVM内，两个相同包名和类名的类可以共存，因为他们的类加载器可以不一样，所以看两个类是否是同一个，除了看类的包名和类名是否都相同之外，还需要他们的类加载器也是同一个才能认为他们是同一个。  </p><p><em><strong>总结，同一个类的条件：包名、类名、类加载器都相同。</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
      <tag>类加载器</tag>
      
      <tag>类加载机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
